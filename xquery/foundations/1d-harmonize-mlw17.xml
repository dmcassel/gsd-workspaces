<export><workspace name="1d-harmonize-mlw17"><query name="envelope-1" focus="false" listorder="1" taborder="2" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(: This script applies the envelope pattern to customer entitities.
 : We first test our envelope in Query Console.
 : The root element is named for the type of entity we are enveloping.
:)

let $docs := fn:collection("customer")
let $enveloped-docs :=
   for $doc in $docs return
   let $collections:= xdmp:document-get-collections($doc)
   return
     &lt;customer&gt;{
      &lt;source&gt;{$doc/customer/*}&lt;/source&gt;
   }&lt;/customer&gt;
return $enveloped-docs
</query><query name="envelope-2" focus="false" listorder="2" taborder="3" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";

(: This script applies the envelope pattern to customer entitities.
 : Here we use cts:uris() to return the URIs we want to envelope.
:)

let $uris := cts:uris('','document', cts:collection-query("customer"))

let $enveloped-docs :=
   for $uri in $uris 
   let $source := fn:doc($uri)
   return
     &lt;customer&gt;{
      &lt;source&gt;{$source/customer/*}&lt;/source&gt;
   }&lt;/customer&gt;
   
return $enveloped-docs


</query><query name="envelope-3" focus="false" listorder="3" taborder="4" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(: This script applies the envelope pattern to customer entitities
 : and inserts the results in the database.
 : Enveloped documents are added to the 'enveloped' collection.
:)

let $collection := "customer"
let $uris := cts:uris('','document', cts:collection-query($collection))

let $enveloped-docs :=
   for $uri in $uris 
   let $collections := xdmp:document-get-collections($uri)
   let $source := fn:doc($uri)
   let $doc := 
                &lt;customer&gt;{
                  &lt;source&gt;{$source/customer/*}&lt;/source&gt;
                }&lt;/customer&gt;
   return xdmp:document-insert($uri, $doc, (), ($collections, "enveloped"))
return ($enveloped-docs,
        fn:concat("You have just enveloped the ",$collection," collection entities.")
       )</query><query name="uris-a" focus="false" listorder="4" taborder="5" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(: This returns the URIs for the documents returned by a more complex query.
:)

let $uris := cts:uris('','document', cts:and-query((cts:collection-query("customer"), 
                                                   cts:collection-query("system-a"),
                                                   cts:collection-query("enveloped"))))
                                                   
return $uris</query><query name="harmonize-a" focus="false" listorder="5" taborder="7" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";

(: This script creates the canonical section for
 : our enveloped documents from system-a and 
 : inserts them before the &lt;source&gt; sections 
 : within our envelopes.
:)
let $uris := cts:uris('','document', cts:and-query((cts:collection-query("customer"), 
                                                   cts:collection-query("system-a"),
                                                   cts:collection-query("enveloped"))))
for $uri in $uris
let $doc := fn:doc($uri)
let $zip := $doc/customer/source/shipping_address/zip/text()
let $header := &lt;canonical&gt;&lt;shipping-zip&gt;{$zip}&lt;/shipping-zip&gt;&lt;/canonical&gt;
return xdmp:node-insert-before($doc/customer/source, $header);

"You just added &lt;canonical&gt; sections to your enveloped documents from system-a";</query><query name="harmonize-b" focus="false" listorder="6" taborder="8" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(: This script creates the canonical section for
 : our enveloped documents from system-b and 
 : inserts them before the &lt;source&gt; sections 
 : within our envelopes.
:)

let $uris := cts:uris('','document', cts:and-query((cts:collection-query("customer"), 
                                                   cts:collection-query("system-b"),
                                                   cts:collection-query("enveloped"))))
                                                   
for $uri in $uris
let $doc := fn:doc($uri)
let $zip := $doc/customer/source/postal/text()
let $header := &lt;canonical&gt;&lt;shipping-zip&gt;{$zip}&lt;/shipping-zip&gt;&lt;/canonical&gt;
return xdmp:node-insert-before($doc/customer/source, $header);

"You just added &lt;canonical&gt; sections to your enveloped documents from system-b";
</query><query name="header-a" focus="false" listorder="7" taborder="6" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";

(: This script mocks up the header section we'll add
 : to our enveloped documents to start storing a 
 : canonical model of the data within our envelopes.
:)

let $uris := cts:uris('','document', cts:and-query((cts:collection-query("customer"), 
                                                   cts:collection-query("system-a"),
                                                   cts:collection-query("enveloped"))))
                                                   
for $uri in $uris
let $doc := fn:doc($uri)
let $zip := $doc/customer/source/shipping_address/zip/text()
let $header := &lt;canonical&gt;&lt;shipping-zip&gt;{$zip}&lt;/shipping-zip&gt;&lt;/canonical&gt;
return ($header) (: , $doc) :)</query><query name="Intro" focus="false" listorder="8" taborder="1" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">"
This workspace demonstrates applying the envelope pattern and harmonization 
to douments in MarkLogic. Here we explore the building blocks and the
underlying concepts.

Traditionally, we test our envelopes and harmonizations in Query Console. 
We develop our code here, then move them over to modules
for CORB (Content Reprocessing in Bulk) or other libraries for use
by APIs so that enveloping and harmonization can perform at scale and be
automated to be scheduled as needed.

The Data Hub Framework and Data Movement SDK can also be leveraged 
for harmonization and enveloping.  

"</query><query name="harmonize-a-2" focus="false" listorder="9" taborder="9" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";

(: This script adds an additional metadata section 
 : to our enveloped documents from system-a and 
 : inserts them before the &lt;canonical&gt; section
 : within our envelopes.
:)

let $uris := cts:uris('','document', cts:and-query((cts:collection-query("customer"), 
                                                   cts:collection-query("system-a"),
                                                   cts:collection-query("enveloped"))))
                                                   
for $uri in $uris
let $doc := fn:doc($uri)
let $metadata := &lt;metadata&gt;
                   &lt;source&gt;POS&lt;/source&gt;
                   &lt;date&gt;{fn:current-date()}&lt;/date&gt;
                   &lt;lineage&gt;v01 transform&lt;/lineage&gt;
                 &lt;/metadata&gt;
return  xdmp:node-insert-before($doc/customer/canonical, $metadata);

"You just added &lt;metadata&gt; sections to your enveloped documents from system-a";
</query><query name="harmonize-b-2" focus="true" listorder="10" taborder="10" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(: This script adds an additional metadata section 
 : to our enveloped documents from system-b and 
 : inserts them before the &lt;canonical&gt; section
 : within our envelopes.
:)


let $uris := cts:uris('','document', cts:and-query((cts:collection-query("customer"), 
                                                   cts:collection-query("system-b"),
                                                   cts:collection-query("enveloped"))))
                                                   
for $uri in $uris
let $doc := fn:doc($uri)
let $metadata := &lt;metadata&gt;
                   &lt;source&gt;Finance&lt;/source&gt;
                   &lt;date&gt;{fn:current-date()}&lt;/date&gt;
                   &lt;lineage&gt;v01 transform&lt;/lineage&gt;
                 &lt;/metadata&gt;
return  xdmp:node-insert-before($doc/customer/canonical, $metadata);
"You just added &lt;metadata&gt; sections to your enveloped documents from system-b";</query></workspace></export>
