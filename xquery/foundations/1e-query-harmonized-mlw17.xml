<export><workspace name="1e-query-harmonized-mlw17"><query name="shipping-zip-cts-query" focus="false" listorder="1" taborder="3" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:
 : Show me any customer records having a shipping-zip equal to 36628
:)


cts:search(
  fn:collection("customer"), 
  cts:element-word-query(xs:QName("shipping-zip"),"36628") 
    )</query><query name="shipping-zip-xpath-query" focus="false" listorder="2" taborder="2" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:
 :Show me any customer records having a shipping-zip equal to 36628
 :
 : Select 
 : From Documents (The database)
 : Where customer.canonical.shipping-zip = 36628
:)

/customer[canonical/shipping-zip eq "36628"]</query><query name="REST-get-query-1" focus="false" listorder="3" taborder="4" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(: Search with REST
 :
 : Show me any customer records containing the text 'alabama'
:)

xdmp:http-get(fn:concat("http://localhost:8000/v1/search?q=alabama"), 
                   &lt;options xmlns="xdmp:http"&gt;
                    &lt;authentication&gt;
                       &lt;username&gt;admin&lt;/username&gt;
                       &lt;password&gt;admin&lt;/password&gt;
                    &lt;/authentication&gt;
                   &lt;/options&gt;)
 
  
(: Change alabama to 36628, then texas, view results :)</query><query name="REST-post-structured-query-2" focus="false" listorder="4" taborder="5" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:
   Structured Search with REST
:)
let $structured-query :=
'{
    "query" : {
      "queries": [{
          "value-query" : {
              "element": {
                "name": "shipping-zip",
                "ns": ""
              },
                "text": [
                  "36628"
                ]
           }
      }]
    }
 }'
 
return 
xdmp:http-post(fn:concat("http://localhost:8000/v1/search"), 
                   &lt;options xmlns="xdmp:http"&gt;
                    &lt;authentication&gt;
                       &lt;username&gt;admin&lt;/username&gt;
                       &lt;password&gt;admin&lt;/password&gt;
                    &lt;/authentication&gt;
                      &lt;headers&gt;
                       &lt;content-type&gt;application/json&lt;/content-type&gt;
                    &lt;/headers&gt;
                   &lt;/options&gt;,
                   document{ $structured-query }
                )(: [2] :)</query><query name="REST-get-document" focus="false" listorder="5" taborder="6" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:
   Return a document/entity with REST
:)

xdmp:http-get(fn:concat("http://localhost:8000/v1/documents?uri=/denormalized/customer-1.xml"), 
                   &lt;options xmlns="xdmp:http"&gt;
                    &lt;authentication&gt;
                       &lt;username&gt;admin&lt;/username&gt;
                       &lt;password&gt;admin&lt;/password&gt;
                    &lt;/authentication&gt;
                   &lt;/options&gt;)</query><query name="orders-by-key" focus="false" listorder="6" taborder="7" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:
Show me the Orders related to a particular Customer
:)
let $customer-doc := fn:doc("/denormalized/customer-3.xml")
let $customer-id := $customer-doc/customer/source/customer_id
let $orders := fn:collection("order")/order[customer_id eq $customer-id]
return ($customer-doc, $orders )</query><query name="products-by-key" focus="true" listorder="7" taborder="8" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:
Show me the Products related to the Orders for a particular Customer
:)

let $customer-doc := fn:doc("/denormalized/customer-3.xml")
let $customer-id := $customer-doc/customer/source/customer_id

let $orders := fn:collection("order")/order[customer_id eq $customer-id]
let $prod-ids := fn:distinct-values($orders/order_lines/order_line/product/text())

let $products := fn:collection("product")/product[id eq $prod-ids]
return $products/(&lt;prod&gt;{name, sku}&lt;/prod&gt;)</query><query name="Intro" focus="false" listorder="8" taborder="1" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">"
This workspace demonstrates searching and querying our harmonized documents.
In addition, we start to explore querying our data via the REST API.
"</query></workspace></export>
