<export><workspace name="2b-REST-search-mlw17"><query name="GET search" focus="false" listorder="2" taborder="2" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(: Using REST to search the database.  
 : For more info see https://docs.marklogic.com/REST/GET/v1/search
 :)
xdmp:http-get( "http://localhost:8000/v1/search?q=central", 
                   &lt;options xmlns="xdmp:http"&gt;
                    &lt;authentication&gt;
                       &lt;username&gt;admin&lt;/username&gt;
                       &lt;password&gt;admin&lt;/password&gt;
                    &lt;/authentication&gt;
                   &lt;/options&gt;)
</query><query name="GET search collection" focus="false" listorder="5" taborder="3" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(: Using REST to search the database within a particular collection.
 :)

xdmp:http-get( "http://localhost:8000/v1/search?q=Zaam-Dox&amp;amp;collection=product", 
                   &lt;options xmlns="xdmp:http"&gt;
                    &lt;authentication&gt;
                       &lt;username&gt;admin&lt;/username&gt;
                       &lt;password&gt;admin&lt;/password&gt;
                    &lt;/authentication&gt;
                   &lt;/options&gt;)
</query><query name="GET format JSON" focus="false" listorder="6" taborder="4" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(: Using REST to search the database within a particular collection,
   specifying the return type as JSON.
 :)
xdmp:http-get( "http://localhost:8000/v1/search?q=Zaam-Dox&amp;amp;collection=product&amp;amp;format=json", 
                   &lt;options xmlns="xdmp:http"&gt;
                    &lt;authentication&gt;
                       &lt;username&gt;admin&lt;/username&gt;
                       &lt;password&gt;admin&lt;/password&gt;
                    &lt;/authentication&gt;
                   &lt;/options&gt;)
</query><query name="fn:doc()" focus="false" listorder="7" taborder="5" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(: Use this to explore document URIs returned in the search response. :)

fn:doc("/product-3.xml")</query><query name="POST element value-query" focus="false" listorder="8" taborder="6" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:
 : Structured Search with REST
 : Here the structured query is JSON
:)
let $structured-query :=
'{
    "query" : {
      "queries": [{
          "value-query" : {
              "element": {
                "name": "shipping-zip",
                "ns": ""
              },
                "text": [
                  "36628"
                ]
           }
      }]
    }
 }'
 
return 
xdmp:http-post(fn:concat("http://localhost:8000/v1/search"), 
                   &lt;options xmlns="xdmp:http"&gt;
                    &lt;authentication&gt;
                       &lt;username&gt;admin&lt;/username&gt;
                       &lt;password&gt;admin&lt;/password&gt;
                    &lt;/authentication&gt;
                      &lt;headers&gt;
                       &lt;content-type&gt;application/json&lt;/content-type&gt;
                    &lt;/headers&gt;
                   &lt;/options&gt;,
                   document{ $structured-query }
                ) [2]</query><query name="POST and-query" focus="false" listorder="9" taborder="7" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:

Structured search with REST.  This script is the RESTful
representation of the following:

cts:search(fn:collection("product"), 
   cts:and-query(
            (cts:element-query(xs:QName("relationship"), "complement"),
             cts:element-query(xs:QName("name"), "Sonair"))
           )
   )
   
The REST API provides additional benefits within it's parameters such as pagination.
:)
let $structured-query :=
'{ "query" : {
      "queries": [{
         "and-query": {
            "queries": [{
                 "value-query" : {
                     "element": {
                     "name": "relationship",
                     "ns": ""
                 },
                  "text": [
                           "complement"
                  ]
                 },
                 "value-query" : {
                     "element": {
                     "name": "name",
                     "ns": ""
                 },
                  "text": [
                           "sonair"
                  ]
                }
            }]
          }
      }]
    }
 }'
 
return 
xdmp:http-post(fn:concat("http://localhost:8000/v1/search"), 
                   &lt;options xmlns="xdmp:http"&gt;
                    &lt;authentication&gt;
                       &lt;username&gt;admin&lt;/username&gt;
                       &lt;password&gt;admin&lt;/password&gt;
                    &lt;/authentication&gt;
                      &lt;headers&gt;
                       &lt;content-type&gt;application/json&lt;/content-type&gt;
                    &lt;/headers&gt;
                   &lt;/options&gt;,
                   document{ $structured-query }
                ) [2]
                
                </query><query name="POST geo query JSON" focus="false" listorder="10" taborder="8" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:
cts:search(fn:collection("customer"),
  cts:element-pair-geospatial-query(xs:QName("billing_address"),
    xs:QName("latitude"), xs:QName("longitude"),  cts:circle(20, cts:point(31.760423, -106.485124))))
:)

let $structured-query :=
'{"query": {
    "queries": [{
      "geo-elem-pair-query": {
        "parent": { "ns": "", "name": "billing_address" },
        "lat": { "ns": "", "name": "latitude" },
        "lon": { "ns": "", "name": "longitude" },
        "circle": [
          {
            "radius": 20,
            "point": [{ "latitude": 31.760423, "longitude": -106.485124 } ]
       
          } 
        ]
      }
    }] 
}}'
 
return 
xdmp:http-post(fn:concat("http://localhost:8000/v1/search"), 
                   &lt;options xmlns="xdmp:http"&gt;
                    &lt;authentication&gt;
                       &lt;username&gt;admin&lt;/username&gt;
                       &lt;password&gt;admin&lt;/password&gt;
                    &lt;/authentication&gt;
                      &lt;headers&gt;
                       &lt;content-type&gt;application/json&lt;/content-type&gt;
                    &lt;/headers&gt;
                   &lt;/options&gt;,
                   document{ $structured-query }
                ) [2]</query><query name="POST geo query XML" focus="false" listorder="11" taborder="9" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:
cts:search(fn:collection("customer"),
  cts:element-pair-geospatial-query(xs:QName("billing_address"),
    xs:QName("latitude"), xs:QName("longitude"),  cts:circle(20, cts:point(31.760423, -106.485124))))
:)

let $structured-query :=
&lt;query xmlns="http://marklogic.com/appservices/search"&gt;
  &lt;geo-elem-pair-query&gt;
    &lt;parent ns="" name="billing_address"/&gt; 
    &lt;lat ns="" name="latitude"/&gt; 
    &lt;lon ns="" name="longitude"/&gt;
    &lt;circle&gt;
      &lt;radius&gt;20&lt;/radius&gt;
      &lt;point&gt; &lt;latitude&gt;31.760423&lt;/latitude&gt; &lt;longitude&gt;-106.485124&lt;/longitude&gt; &lt;/point&gt;
    &lt;/circle&gt;
  &lt;/geo-elem-pair-query&gt;
&lt;/query&gt;
 
return 
xdmp:http-post(fn:concat("http://localhost:8000/v1/search"), 
                   &lt;options xmlns="xdmp:http"&gt;
                    &lt;authentication&gt;
                       &lt;username&gt;admin&lt;/username&gt;
                       &lt;password&gt;admin&lt;/password&gt;
                    &lt;/authentication&gt;
                      &lt;headers&gt;
                       &lt;content-type&gt;application/xml&lt;/content-type&gt;
                    &lt;/headers&gt;
                   &lt;/options&gt;,
                   document{ $structured-query }
                ) [2]</query><query name="POST with cts:parse" focus="false" listorder="13" taborder="11" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:
cts:search(fn:collection("customer"),
  cts:element-pair-geospatial-query(xs:QName("billing_address"),
    xs:QName("latitude"), xs:QName("longitude"),  cts:circle(20, cts:point(31.760423, -106.485124))))
:)

let $structured-query := cts:parse("merchant NEAR/5 parkway AND texas")
return 
xdmp:http-post(fn:concat("http://localhost:8000/v1/search"), 
                   &lt;options xmlns="xdmp:http"&gt;
                    &lt;authentication&gt;
                       &lt;username&gt;admin&lt;/username&gt;
                       &lt;password&gt;admin&lt;/password&gt;
                    &lt;/authentication&gt;
                      &lt;headers&gt;
                       &lt;content-type&gt;application/xml&lt;/content-type&gt;
                    &lt;/headers&gt;
                   &lt;/options&gt;,
                   document{ $structured-query }
                ) [2]
</query><query name="cts:parse" focus="false" listorder="12" taborder="10" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(: cts:parse() parses a query string and returns a cts:query which
 : can be serialized as our structured query document
 : http://docs.marklogic.com/cts:parse
 :
 : Run the below and compare the results.
:)

cts:parse("merchant NEAR/5 parkway AND texas"),
&lt;document&gt;{cts:parse("merchant NEAR/5 parkway AND texas")}&lt;/document&gt;</query><query name="Intro" focus="true" listorder="1" taborder="1" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">"
In this workspace we continue to explore search and query
with a focus on using the REST API.
"</query></workspace></export>
