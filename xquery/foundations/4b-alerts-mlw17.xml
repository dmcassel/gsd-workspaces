<export><workspace name="4b-alerts-mlw17"><query name="1. Config" focus="false" listorder="1" taborder="2" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
import module namespace alert = "http://marklogic.com/xdmp/alert" at "/MarkLogic/alert.xqy";
(: 
 : Create an alerting cofiguration.
:)
let $config := alert:make-config(
      "my-alert-config-uri",
      "My Alerting App",
      "Alerting config for my app",
        &lt;alert:options/&gt; )
return
(alert:config-insert($config),
 "You've just created an alerting configuration.",
 "This will be saved in the database as my-alert-config-uri/config.xml"
)</query><query name="2. Action" focus="false" listorder="2" taborder="3" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
import module namespace alert = "http://marklogic.com/xdmp/alert" at "/MarkLogic/alert.xqy";
(: 
 : Define an action for the alerting configuration we created.
:)
let $action := alert:make-action(
    "xdmp:log", 
    "log to ErrorLog.txt",
    xdmp:modules-database(),
    xdmp:modules-root(), 
    "/alert-action.xqy",
    &lt;alert:options/&gt; )
return
(alert:action-insert("my-alert-config-uri", $action),
 "You just defined an action for your alerting configuration.",
 "You've defined the action to be found in the Modules database in alert-action.xqy module, so we'll add that to the Modules database next."
 )</query><query name="3. Rule" focus="false" listorder="3" taborder="5" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
import module namespace alert = "http://marklogic.com/xdmp/alert" at "/MarkLogic/alert.xqy";
(: 
 : Create a rule for our alerting configuration to trigger our action.
:)

let $rule := alert:make-rule(
    "simple", 
    "hello world rule",
    0, (: equivalent to xdmp:user(xdmp:get-current-user()) :)
    cts:word-query("hello world"),
    "xdmp:log",
    &lt;alert:options/&gt; )
return
( alert:rule-insert("my-alert-config-uri", $rule),
  "You've just created a rule for your first alert."
)</query><query name="4. Invoke" focus="false" listorder="4" taborder="6" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
import module namespace alert = "http://marklogic.com/xdmp/alert" at "/MarkLogic/alert.xqy";
(:
Test our alert.
:)

alert:invoke-matching-actions("my-alert-config-uri", 
      &lt;doc&gt;I would just like to say: hello world!&lt;/doc&gt;, &lt;options/&gt;),
"Now go look in the log file: 8000_ErrorLog.txt to see the results of our action.
 On windows, you'll find this file at C:\Program Files\MarkLogic\Data\Logs."</query><query name="Insert Action Module" focus="false" listorder="5" taborder="4" active="true" database="15131367517851139946" server="12590722383439523806" database-name="Modules" server-name="App-Services" mode="xquery">xquery version "1.0-ml";
(:
 : Save an action module to the Modules database.
 : Make sure you've selected 'Modules' as the database above.
:)

let $code := 
'xquery version "1.0-ml";
 xdmp:log(fn:concat("====================================================&gt;&gt;",xdmp:get-current-user(), " was alerted"))'

return ( xdmp:document-insert("/alert-action.xqy", text{$code}),
         "You've now saved alert-action.xqy to the database.")</query><query name="Intro" focus="true" listorder="6" taborder="1" active="true" database="8469375127942903998" server="12590722383439523806" database-name="Documents" server-name="App-Services" mode="xquery">"
In this workspace we demonstrate how to install and configure alerts.

Alerts provide a way to automate our reverse-queries so that upon meeting 
a condition (matching a query), an action can be invoked.

To create an Alert, we must
1) Set Up a Configuration  
2) Set Up Actions  
3) Create Rules  (reverse queries)

We can then

4) Run the Rules Against Content

For more information see http://docs.marklogic.com/guide/search-dev/alerts
"</query></workspace></export>
