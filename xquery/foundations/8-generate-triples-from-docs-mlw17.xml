<export><workspace name="8-generate-triples-from-docs-mlw17"><query name="delete collections" focus="false" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";

(: Delete Triples created from ttl in unit # :)

xdmp:collection-delete("http://marklogic.com/example/graphs/customers"),
xdmp:collection-delete("http://marklogic.com/example/graphs/orders"),
xdmp:collection-delete("http://marklogic.com/example/graphs/products"),
xdmp:collection-delete("http://marklogic.com/semantics#default-graph")</query><query name="generate-customer-triples" focus="true" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics"
   at "/MarkLogic/semantics.xqy";

(:modeled way data came in, we start there.  we may want to consider remodeling to better capture hierarchy/taxonomy - 
  example- a plant has a part and a part name? maybe a plant has a part and a part has a part name.  confirm. :)
  
(: declare variable $URI as xs:string external; :)

(: let $URI := "/test-3.xml" :) (: loaded from query console :)
(: let $URI := "/plants/MFG_NEO-10.csv-0-1.xml" (: loaded via mlcp :) :)

let $uris := cts:uris('','document',cts:collection-query("customer"))
for $URI at $idx in $uris return  

 

let $doc := fn:doc($URI)

(: # vs / :)

let $ids-prefix := "http://marklogic.com/example/customers/"
let $ont-prefix :=    "http://marklogic.com/example/ontology/"
let $rdf-prefix := "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
let $xs-prefix := "http:///www.w3.org/2001/"  (: contrast with xs:long() :)

let $id := $doc/customer/customer_id/fn:string(.)
let $first-name := $doc/customer/first_name/fn:string(.)
let $last-name := $doc/customer/last_name/fn:string(.)
let $email := $doc/customer/email/fn:string(.)
let $ssn := $doc/customer/ssn/fn:string(.)
let $phone := $doc/customer/phone/fn:string(.)

let $billing-id := fn:concat($idx,0)
let $shipping-id := fn:concat($idx,1)

let $billing-street := $doc/customer/billing_address/street/fn:string(.)
let $billing-city := $doc/customer/billing_address/city/fn:string(.)
let $billing-state := $doc/customer/billing_address/state/fn:string(.)
let $billing-zip := $doc/customer/billing_address/zip/fn:string(.)
let $billing-latitude := $doc/customer/billing_address/latitude/fn:string(.)
let $billing-longitude := $doc/customer/billing_address/longitude/fn:string(.)

let $shipping-street := $doc/customer/shipping_address/street/fn:string(.)
let $shipping-city := $doc/customer/shipping_address/city/fn:string(.)
let $shipping-state := $doc/customer/shipping_address/state/fn:string(.)
let $shipping-zip := $doc/customer/shipping_address/zip/fn:string(.)
let $shipping-latitude := $doc/customer/shipping_address/latitude/fn:string(.)
let $shipping-longitude := $doc/customer/shipping_address/longitude/fn:string(.)

let $region := $doc/customer/region/fn:string(.)
let $segment := $doc/customer/segment/fn:string(.)

let $triples := 
(
  sem:triple(sem:iri($ids-prefix || $id),
             sem:iri($rdf-prefix || "type"),
             sem:iri($ont-prefix || "Customer" )),
           
  sem:triple(sem:iri($ids-prefix || $id),
             sem:iri($ont-prefix || "customerId"),
               (: as charles about http:///www.w3.org/2001/long" vs this 
                  looks like they're XMLSchema in orig except for long and decimal. Reason? :)
             xs:long($id)),
             
  sem:triple(sem:iri($ids-prefix || $id),
             sem:iri($ont-prefix || "firstName"),
             $first-name),
             
  sem:triple(sem:iri($ids-prefix || $id),
             sem:iri($ont-prefix || "lastName"),
             $last-name),
              
  sem:triple(sem:iri($ids-prefix || $id),
             sem:iri($ont-prefix || "email"),
             $email),
             
  sem:triple(sem:iri($ids-prefix || $id),
             sem:iri($ont-prefix || "ssn"),
             $ssn),

  sem:triple(sem:iri($ids-prefix || $id),
             sem:iri($ont-prefix || "phone"),
             $phone),
             
  sem:triple(sem:iri($ids-prefix || $id),
             sem:iri($ont-prefix || "region"),
             $region),
  
  (:Billing Triples:)
  sem:triple(sem:iri($ids-prefix || $id),
             sem:iri($ont-prefix || "billingAddress"),
             sem:iri($ont-prefix || $billing-id)),
  
  sem:triple(sem:iri($ids-prefix || $billing-id),
             sem:iri($rdf-prefix || "type"),
             sem:iri($ont-prefix || "BillingAddress" )),
         
  sem:triple(sem:iri($ids-prefix || $billing-id),
             sem:iri($ont-prefix || "street"),
             $billing-street),
             
  sem:triple(sem:iri($ids-prefix || $billing-id),
             sem:iri($ont-prefix || "city"),
             $billing-city),
             
  sem:triple(sem:iri($ids-prefix || $billing-id),
             sem:iri($ont-prefix || "state"),
             $billing-state),
             
  sem:triple(sem:iri($ids-prefix || $billing-id),
             sem:iri($ont-prefix || "zip"),
             $billing-zip),
             
  sem:triple(sem:iri($ids-prefix || $billing-id),
             sem:iri($ont-prefix || "latitude"),
             xs:decimal($billing-latitude)),
             
  sem:triple(sem:iri($ids-prefix || $billing-id),
             sem:iri($ont-prefix || "longitude"),
             xs:decimal($billing-longitude)),
  
  (:Shipping Triples:)
  sem:triple(sem:iri($ids-prefix || $id),
             sem:iri($ont-prefix || "shippingAddress"),
             sem:iri($ont-prefix || $shipping-id)),
   
  sem:triple(sem:iri($ids-prefix || $shipping-id),
             sem:iri($rdf-prefix || "type"),
             sem:iri($ont-prefix || "ShippingAddress" )),
   
  sem:triple(sem:iri($ids-prefix || $shipping-id),
             sem:iri($ont-prefix || "street"),
             $shipping-street),
             
  sem:triple(sem:iri($ids-prefix || $shipping-id),
             sem:iri($ont-prefix || "city"),
             $shipping-city),
             
  sem:triple(sem:iri($ids-prefix || $shipping-id),
             sem:iri($ont-prefix || "state"),
             $shipping-state),
             
  sem:triple(sem:iri($ids-prefix || $shipping-id),
             sem:iri($ont-prefix || "zip"),
             $shipping-zip),
             
  sem:triple(sem:iri($ids-prefix || $shipping-id),
             sem:iri($ont-prefix || "latitude"),
             xs:decimal($shipping-latitude)),
             
  sem:triple(sem:iri($ids-prefix || $shipping-id),
             sem:iri($ont-prefix || "longitude"),
             xs:decimal($shipping-longitude))              
             
)

return ($triples,  sem:graph-insert(sem:iri("http://marklogic.com/example/graphs/customers"), $triples) )</query><query name="generate-order-triples" focus="false" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";&#13;declare namespace html = "http://www.w3.org/1999/xhtml";&#13;&lt;p&gt;hello world&lt;/p&gt;</query><query name="generate-product-triples" focus="false" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";&#13;declare namespace html = "http://www.w3.org/1999/xhtml";&#13;&lt;p&gt;hello world&lt;/p&gt;</query><query name="Query 1" focus="false" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";
declare namespace html = "http://www.w3.org/1999/xhtml";
fn:doc("/triplestore/d78b350326416e66.xml")</query></workspace></export>
