<export><workspace name="9-b-docs-and-triples-harmonize-elements-mlw17"><query name="1. Insert Documents" focus="false" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";
(: Insert 2 documents, one with first_name and one with fname.  
   Note different date formats as well. 
:)

xdmp:document-insert(
  "/patients/record1.xml", 
  &lt;document id="1"&gt;
    &lt;content&gt;
      &lt;first_name&gt;John&lt;/first_name&gt;
      &lt;date&gt;01-27-2015&lt;/date&gt;
      &lt;comments&gt;This is a test of using SPARQL to standardize element names and element datatypes&lt;/comments&gt;
    &lt;/content&gt;
  &lt;/document&gt; ,
  xdmp:default-permissions() ,
  "patients"
  ) ;
  
xdmp:document-insert(
  "/patients/record2.xml", 
  &lt;document id="2"&gt;
    &lt;content&gt;
      &lt;fname&gt;John&lt;/fname&gt;
      &lt;date&gt;01272015&lt;/date&gt;
      &lt;comments&gt;Patient complained of throat pains.  Throat not inflammed. Test for strep negative.&lt;/comments&gt;
    &lt;/content&gt;
  &lt;/document&gt; ,
  xdmp:default-permissions() ,
  "patients"
  ) ;
  

         </query><query name="2. Query 1 - John" focus="false" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";
(: 
  Query 1 - We don't know anything about the Schema of any documents, but we can search for "John".
  (But note: this will also find people with last name John, and text that contains "John")
  Model: no model at all.
:)

cts:search(
  fn:collection(), 
  cts:word-query("John")
  )</query><query name="3. Query 2 - John OR" focus="false" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";
(: 
  Query 2 - We need our search to be more precise, i.e. We only want documents with "John" as first name.
  For that, we need to know how the concept of "first name" has been tagged.
  Model: captured in the query.
:)

cts:search(
  fn:collection(), 
  cts:or-query( (
   cts:element-word-query(xs:QName("first_name"),"John") ,
   cts:element-word-query(xs:QName("fname"),"John") 
   ))
  )</query><query name="4. Insert Triples" focus="false" active="true" content-source="as:6240101570028256752:" mode="sparql-update">## update

## Insert triples that says "first_name" and "fname" are the values of ex:given-name1, ex:given-name2, which are both of type given-name

## Model: we just built a semantic model!

PREFIX ex: &lt;http://example.com/sem1&gt; 

INSERT DATA {
  GRAPH &lt;sem1-graph&gt; {
    ex:given-name1 a ex:given-name .
    ex:given-name1 ex:label "first_name" .
    ex:given-name2 a ex:given-name .
    ex:given-name2 ex:label "fname" .
  }
}
</query><query name="5. Find all variations of a given name" focus="false" active="true" content-source="as:6240101570028256752:" mode="sparql">## query the model
## show us all the different ways to express given-name  (EXPRESS or ASSERT? ASK CHARLES :)

PREFIX ex: &lt;http://example.com/sem1&gt; 

SELECT DISTINCT( ?label AS ?dlabel ) WHERE {
  ?s a ex:given-name .
  ?s ex:label ?label
}</query><query name="6. Use the model in a search" focus="false" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";
(:
  (XQuery version) Use the semantic model we just built to search for documents with given name "John"
  Model: query writer doesnt need to know anything about the model, since it's encapsulated in the triples, and centrally managed
:)

import module namespace sem = "http://marklogic.com/semantics" 
  at "/MarkLogic/semantics.xqy";
  
declare namespace sparql-res = "http://www.w3.org/2005/sparql-results#" ;
  
let $sparql-query := '
PREFIX ex: &lt;http://example.com/sem1&gt; 

SELECT DISTINCT( ?label AS ?dlabel ) WHERE {
  ?s a ex:given-name .
  ?s ex:label ?label
}
'

let $map := sem:sparql($sparql-query)
let $keys := map:keys($map)
let $given-names := map:get($map,$keys[1])

(: 
another way to achieve the results of 21-23 follows but
you'll want to understand maps and use them as that's the best practice

let $result :=
  sem:sparql( $sparql )

let $given-names :=
  sem:query-results-serialize( $result )//sparql-res:literal/text()
:)

return
  cts:search(
    fn:collection(), 
    cts:element-word-query(xs:QName($given-names),"John")
    )
  
  
 </query><query name="7. Insert another document" focus="false" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";
(: We just found another datasource.  Once we import this it will be found by cts:search (Query1),
but obviously not in the named query (Query2) :)

xdmp:document-insert(
  "/patients/record3.xml", 
  &lt;document id="3"&gt;
    &lt;content&gt;
      &lt;name1&gt;John&lt;/name1&gt;
      &lt;date&gt;01-27-2015&lt;/date&gt;
      &lt;comments&gt;Patient has swelling in left foot. Sprained ankle trippinng on tennis ball.  Patient suffers from obesity.&lt;/comments&gt;
    &lt;/content&gt;
  &lt;/document&gt; ,
  xdmp:default-permissions() ,
  "patients"
  ) ;
</query><query name="8. Add label" focus="false" active="true" content-source="as:6240101570028256752:" mode="sparql-update">## However, if we add another triple, then the data is instantly available (no application modification necessary) 
## After running Query 5,6,7 again


PREFIX ex: &lt;http://example.com/sem1&gt; 

INSERT DATA {
  GRAPH &lt;sem1-graph&gt; {
    ex:given-name3 a ex:given-name .
    ex:given-name3 ex:label "name1" .
  }
}</query><query name="9. Harmonize" focus="false" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";
(: Once we understand our variations we may want to persist our given name as an element that is common to all records(envelope pattern).  
   Model: Envelope pattern :)


xdmp:node-insert-before(fn:doc("/patients/record1.xml")/document/content,
    &lt;common&gt;&lt;firstname&gt;John&lt;/firstname&gt;&lt;/common&gt;);

xdmp:node-insert-before(fn:doc("/patients/record2.xml")/document/content,
    &lt;common&gt;&lt;firstname&gt;John&lt;/firstname&gt;&lt;/common&gt;);

xdmp:node-insert-before(fn:doc("/patients/record3.xml")/document/content,
    &lt;common&gt;&lt;firstname&gt;John&lt;/firstname&gt;&lt;/common&gt;);
</query><query name="10.Harmonize Query" focus="false" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";
(: The envelope pattern gives us just one element to query. :)

cts:search(
  fn:collection(), 
  cts:element-word-query(xs:QName("firstname"),"John") 
    )</query><query name="11. Cleanup triples" focus="false" active="true" content-source="as:6240101570028256752:" mode="sparql-update">## update
        
        DROP GRAPH &lt;sem1-graph&gt;</query><query name="12. Cleanup documents" focus="true" active="true" content-source="as:6240101570028256752:" mode="xquery">xquery version "1.0-ml";

xdmp:collection-delete( "patients" )</query></workspace></export>
